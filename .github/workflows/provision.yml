name: Provision ACA Environment

on:
  workflow_dispatch:
    inputs:
      environment_name:
        description: 'Name of the container app environment'
        required: true
      location:
        description: 'Azure region'
        required: true
      env_code:
        description: 'Three letter environment code'
        required: true
      port_context:
        required: true
        description: Includes the action's run id
        type: string

jobs:
  deploy:
    permissions:
      id-token: write
      contents: write

    runs-on: ubuntu-latest
    env:
      ARM_USE_OIDC: true
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      PORT_RUN_ID: ${{ fromJson(inputs.port_context).runId }}
    steps:
      - name: Start provisioning
        uses: port-labs/port-github-action@v1
        with:
          baseUrl: ${{ secrets.PORT_BASE_URL }}
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: 'Starting provisioning'

      - uses: actions/checkout@v3

      - name: Log checkout
        if: success()
        uses: port-labs/port-github-action@v1
        with:
          baseUrl: ${{ secrets.PORT_BASE_URL }}
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: 'Repository checked out'

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Log jq install
        if: success()
        uses: port-labs/port-github-action@v1
        with:
          baseUrl: ${{ secrets.PORT_BASE_URL }}
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: 'jq installed'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Log terraform setup
        if: success()
        uses: port-labs/port-github-action@v1
        with:
          baseUrl: ${{ secrets.PORT_BASE_URL }}
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: 'Terraform setup complete'

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Capture Azure details
        if: success()
        id: azure
        run: |
          USER=$(az account show --query user.name -o tsv)
          SUB=$(az account show --query id -o tsv)
          echo "msg=Authenticated as $USER in subscription $SUB" >> $GITHUB_OUTPUT

      - name: Log Azure login
        if: success()
        uses: port-labs/port-github-action@v1
        with:
          baseUrl: ${{ secrets.PORT_BASE_URL }}
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: ${{ steps.azure.outputs.msg }}


      - name: Terraform Init
        run: terraform -chdir=terraform init

      - name: Log terraform init
        if: success()
        uses: port-labs/port-github-action@v1
        with:
          baseUrl: ${{ secrets.PORT_BASE_URL }}
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: 'Terraform init complete'

      - name: Terraform Plan
        id: plan
        run: |
          terraform -chdir=terraform plan \
            -var="name=${{ github.event.inputs.environment_name }}" \
            -var="location=${{ github.event.inputs.location }}" \
            -var="env_code=${{ github.event.inputs.env_code }}" \
            -input=false -out=tfplan | tee plan.log

      - name: Capture plan summary
        if: success()
        id: plan_summary
        run: |
          SUMMARY=$(grep -E '^Plan:' plan.log || echo 'Plan summary unavailable')
          echo "msg=$SUMMARY" >> $GITHUB_OUTPUT

      - name: Log terraform plan
        if: success()
        uses: port-labs/port-github-action@v1
        with:
          baseUrl: ${{ secrets.PORT_BASE_URL }}
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: ${{ steps.plan_summary.outputs.msg }}

      - name: Terraform Apply
        if: success()
        run: terraform -chdir=terraform apply -input=false -auto-approve tfplan | tee apply.log

      - name: Capture apply summary
        if: success()
        id: apply_summary
        run: |
          SUMMARY=$(grep -E '^Apply complete' apply.log || echo 'Apply complete')
          echo "msg=$SUMMARY" >> $GITHUB_OUTPUT

      - name: Log terraform apply
        if: success()
        uses: port-labs/port-github-action@v1
        with:
          baseUrl: ${{ secrets.PORT_BASE_URL }}
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: ${{ steps.apply_summary.outputs.msg }}

      - name: Capture outputs
        if: success()
        id: tf_output
        run: terraform -chdir=terraform output -json > ../outputs.json

      - name: Log outputs captured
        if: success()
        uses: port-labs/port-github-action@v1
        with:
          baseUrl: ${{ secrets.PORT_BASE_URL }}
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: 'Terraform outputs captured'

      - name: Generate config file
        if: success()
        id: config
        run: |
          NAME=$(jq -r '.name.value' ../outputs.json)
          LOCATION=$(jq -r '.location.value' ../outputs.json)
          RG=$(jq -r '.resource_group_name.value' ../outputs.json)
          WORKSPACE=$(jq -r '.workspace_name.value' ../outputs.json)
          CONFIG_FILE=configs/${{ github.event.inputs.environment_name }}.yaml
          printf "name: %s\nlocation: %s\nresource_group_name: %s\nworkspace_name: %s\n" \
            "$NAME" "$LOCATION" "$RG" "$WORKSPACE" > "$CONFIG_FILE"
          echo "file=$CONFIG_FILE" >> $GITHUB_OUTPUT

      - name: Log config generated
        if: success()
        uses: port-labs/port-github-action@v1
        with:
          baseUrl: ${{ secrets.PORT_BASE_URL }}
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: Generated ${{ steps.config.outputs.file }}

      - name: Commit config file
        if: success()
        run: |
          git config user.email "75343302+getport-io[bot]@users.noreply.github.com"
          git config user.name "getport-io[bot]"
          git add configs/${{ github.event.inputs.environment_name }}.yaml
          git commit -m "Add config for ${{ github.event.inputs.environment_name }}"
          git push origin HEAD:main

      - name: Log config committed
        if: success()
        uses: port-labs/port-github-action@v1
        with:
          baseUrl: ${{ secrets.PORT_BASE_URL }}
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: Committed ${{ steps.config.outputs.file }}

      - name: Compose run summary
        if: success()
        id: run_summary
        run: |
          RG=$(jq -r '.resource_group_name.value' ../outputs.json)
          WORKSPACE=$(jq -r '.workspace_name.value' ../outputs.json)
          MSG="Environment ${{ github.event.inputs.environment_name }} in ${{ github.event.inputs.location }}"
          MSG+=" using RG $RG and workspace $WORKSPACE"
          MSG+=". Config: ${{ steps.config.outputs.file }}"
          echo "msg=$MSG" >> $GITHUB_OUTPUT

      - name: Log run summary
        if: success()
        uses: port-labs/port-github-action@v1
        with:
          baseUrl: ${{ secrets.PORT_BASE_URL }}
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: ${{ steps.run_summary.outputs.msg }}

      - name: Mark run success
        if: success()
        uses: port-labs/port-github-action@v1
        with:
          baseUrl: ${{ secrets.PORT_BASE_URL }}
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          status: SUCCESS
          logMessage: 'Provisioning complete'

      - name: Mark run failure
        if: failure()
        uses: port-labs/port-github-action@v1
        with:
          baseUrl: ${{ secrets.PORT_BASE_URL }}
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          status: FAILURE
          logMessage: 'Provisioning failed'
